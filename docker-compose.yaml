services:
  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    container_name: client
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - client_node_modules:/app/node_modules
    depends_on:
      - server
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    command: ["npm", "run", "dev"]

  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    container_name: server
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - ./server:/app
      - server_node_modules:/app/node_modules
    depends_on:
      - postgres
    environment:
      - NODE_ENV=development
      - PORT=${PORT}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - CORS_ORIGIN=${CORS_ORIGIN}
    networks:
      - app-network
    command: [ "npm", "run", "dev" ]

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  client_node_modules:
  server_node_modules: